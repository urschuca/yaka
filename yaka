#!/bin/bash
#Yet Another tasKs mAnager 

#set -x

#shamefully copying from : https://natelandau.com/bash-scripting-utilities/

bold=$(tput bold)
reset=$(tput sgr0)
purple=$(tput setaf 208)
green=$(tput setaf 76)
red=$(tput setaf 1)

e_header() { printf "\n${bold}${purple}==========  %s  ==========${reset}\n" "$@" 
}
e_success() { printf "${green}✔ %s${reset}\n" "$@"
}
e_error() { printf "${red}✖ %s${reset}\n" "$@"
}

#working rewrite of https://medium.com/@sambrin/fin-command-line-todo-list-made-with-30a2346de068
# dont use medium website for code ffs

#Initialize
TASKS_DIR=~/TODO/tasks/
WAITING_DIR=~/TODO/waiting/
COMPLETED_DIR=~/TODO/completed/

function todo {
	e_header "TODO"
	find ${TASKS_DIR} -not -path '*/\.*' -type f -printf '\t ➜ %P\n'
	e_header "Waiting"
	find ${WAITING_DIR} -not -path '*/\.*' -type f -printf '\t ➜ %P\n'
  echo ""
}

function c_todo {
	if [ -z "$@" ]
	then
		todo
	else
		touch ${TASKS_DIR}$@
		todo
	fi
}

function c_fin {
        if [ -f ${TASKS_DIR}"$@" ]
	then
		mv ${TASKS_DIR}"$@" ${COMPLETED_DIR}"$@"
		touch ${COMPLETED_DIR}$@
		e_success "$@ is completed"
		todo
		exit
	else
		if [ -f ${WAITING_DIR}"$@" ]
		then
			mv ${WAITING_DIR}"$@" ${COMPLETED_DIR}"$@"
			touch ${COMPLETED_DIR}$@
			e_success "$@ is completed"
			todo
			exit 
		fi
		e_error " Tasks $@ doesn't exist."
		exit 1
	fi
}

function c_waiting {
	if [ -f ${TASKS_DIR}"$@" ]
	then	
		mv ${TASKS_DIR}"$@" ${WAITING_DIR}"$@"
		e_success "$@ is moved to waiting tasks"
		todo
		exit
	else
		e_error " Tasks $@ doesn't exist."
		exit 1
	fi
}

function help {
  echo "Usage:"
  echo " yaka [options] TASKS"
  echo ""
  echo " -h,      display this mesage"
  echo " -w,      move a tasks to Waiting"
  echo " -f,      move a tasks to Finished"
}

#h: help, w: add to waiting, f: end of tasks
while getopts ":hw:f:" opt; do
   case $opt in
     h)
        help 
        exit 1
        ;;
     w)
        c_waiting "$OPTARG"
        echo "w"
	      exit 1
        ;;
     f)
        c_fin "$OPTARG"
	      exit 1
        ;;
     *)
	      echo "YAKA requires an argument." >&2
        help
	      exit 1
        ;;
   esac
done

if [ -z "$1" ]
then
	todo
else
	touch ${TASKS_DIR}"${*}"
	todo
fi
